# -*- coding: utf-8 -*-
"""Ejercicio4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JyrD5rI1v7cVANg2EuGvQB0yOs40VAWe
"""

from google.colab import output
from IPython.display import display, Javascript
from google.colab.patches import cv2_imshow
import cv2
import numpy as np
from PIL import Image
from io import BytesIO
import base64
import os

os.makedirs("Captures", exist_ok=True)

img_np = None

def capture_image():
    js = Javascript('''
        async function takePhoto() {
            const video = document.createElement('video');
            video.style.display = 'none';
            document.body.appendChild(video);

            const stream = await navigator.mediaDevices.getUserMedia({video: true});
            video.srcObject = stream;
            await video.play();

            const canvas = document.createElement('canvas');
            canvas.width = 640;
            canvas.height = 480;

            window.addEventListener('keydown', async (event) => {
                if (event.key === 'f') {
                    canvas.getContext('2d').drawImage(video, 0, 0);
                    stream.getTracks().forEach(track => track.stop());
                    video.remove();
                    const dataUrl = canvas.toDataURL('image/jpeg', 1.0);
                    google.colab.kernel.invokeFunction('notebook.captured_image', [dataUrl], {});
                }
            });
        }
        takePhoto();
    ''')
    display(js)

def captured_image(img_base64):
    global img_np
    img_data = img_base64.split(",")[1]
    img = Image.open(BytesIO(base64.b64decode(img_data)))
    img_np = np.array(img)[:, :, ::-1]
    cv2.imwrite("Captures/image1.jpg", img_np)
    print("Imagen guardada como Captures/image1.jpg")
    process_image()

output.register_callback('notebook.captured_image', captured_image)

capture_image()

def process_image():
    global img_np
    if img_np is not None:
        gray_img = cv2.cvtColor(img_np, cv2.COLOR_BGR2GRAY)
        height, width = gray_img.shape
        half_height, half_width = height // 2, width // 2
        quadrant1 = gray_img[0:half_height, 0:half_width]
        quadrant2 = gray_img[0:half_height, half_width:width]
        quadrant3 = gray_img[half_height:height, 0:half_width]
        quadrant4 = gray_img[half_height:height, half_width:width]

        print("Cuadrante 1:")
        cv2_imshow(quadrant1)
        print("Cuadrante 2:")
        cv2_imshow(quadrant2)
        print("Cuadrante 3:")
        cv2_imshow(quadrant3)
        print("Cuadrante 4:")
        cv2_imshow(quadrant4)
    else:
        print("La imagen aún no ha sido capturada. Inténtalo de nuevo.")